红黑树是一个特殊的存储类型二叉树，解决的主要问题是二叉树某一条分支太长导致的树不平衡，检索效率低的问题

红黑树有5条基本限制，保证了树的完整型
	1、节点只有黑色、红色
	2、根节点是黑色
	3、所有的叶子节点都为黑色（Null节点）
	4、红色节点下面一定是黑色节点
	5、从任意节点到其每个叶子节点一定经过相同的黑色节点
因此红黑树还有条特性为最长的路径不会超过最短路径的2倍距离

红黑树的插入条件
	1、若当前节点为根节点直接设置为黑色
	2、插入的节点（非根节点）设置为红色（避免黑色节点会多一个）
	3、插入节点的父节点若为黑色，直接插入
	4、插入节点的父节点若为红色，分几种情况
		①、叔节点为红色，更换父、叔节点颜色同时更换祖父节点颜色（保证黑色节点数不变，因为父、叔节点必然和祖父节点颜色相反），然后设置祖父节点为当前节点进行判断
		②、叔节点为黑色，同时当前节点是父节点左子节点，父节点是祖父节点的左子节点（left-left），祖父节点右旋转，同时更换父节点和祖父节点颜色
		③、叔节点为黑色，同时当前节点是父节点左子节点，父节点是祖父节点的右子节点（left-right），父节点右旋转后，祖父节点左旋转，更换后新的父节点和祖父节点颜色互换
		④、叔节点为黑色，同时当前节点是父节点右子节点，父节点是祖父节点的左子节点（right-left），父节点左旋转后，足父节点右旋转，更换后新的父节点和祖父节点颜色互换
		⑤、叔节点为黑色，同时当前节点是父节点右子节点，父节点是祖父节点的右子节点（right-right），祖父节点左旋转，同时更换父节点和祖父节点颜色

红黑树的删除条件
	红黑树节点删除需要先对节点进行位置调整，保证需要删除的节点没有子节点，因此分成了以下3种情况
	1、待删除节点没有子节点
		若节点为红色直接删除
		若节点为黑色，进行旋转调色，再删除（黑色节点的删除会影响某条路径的黑色节点数）
	2、待删除节点有一个子节点（该子节点不可能为黑色，且该子节点不可能有子子节点，因此该子节点必然为单一的红节点）
		待删除节点与子节点互换，再对这个节点进行删除
	3、待删除节点有两个子节点
		找出当前节点的后继最小节点，进行互换，由于最小节点有可能有一个单右侧节点，因此可能还需要与右侧节点再互换，然后对当前节点进行判断

	位置调整后待删除节点必然没有子节点，若为黑色节点时，需要进行旋转调色后删除，规则如下：（N当前节点；P父节点；W兄弟节点；Nf兄弟远子节点；Nn兄弟近子节点）
		1、若这个节点为红色或为根节点，则直接设为黑色。（结束）
		2、若这个节点为黑色，且兄弟节点为红色，则兄弟节点和父节点颜色互换，之后进行旋转，若N在P左侧则左旋转，右侧右旋转。再对N进行旋转调色（不结束）
		3、若这个节点为黑色，且兄弟节点为黑色，若N的Nf（兄弟远子节点）为红，则修改W为P节点颜色，P和Nf修改为黑色（黑黑黑，黑红黑），之后若N在P左侧则
		对P进行左旋转，右侧右旋转。（结束）
		4、若这个节点为黑色，且兄弟节点为黑色，若N的Nn为红色（Nf为黑色），对W和Nn进行颜色转换，之后对W进行旋转使P、Nn、W一条线，再重复3步骤（不结束）
		5、若这个节点为黑色，且兄弟节点为黑色，若W的两个子节点都为黑色（必然是两个空节点），则将W设为红色，之后改为对P节点进行旋转调色（不结束）
	只有N为黑，W为红，或者N为黑，W为黑，W两个子节点都为黑的情况下，需要进行两次以上旋转调色
