对象2个属性，proto、constructor
函数3个属性 proto、constructor、prototype

对象有三种（实例化对象、原型对象、函数对象）

proto由对象指向对象
constructor由对象指向函数
prototype由函数指向对象

想要找出（实例化对象、函数对象）的constructor指向，需要知道自己proto的指向，因为constructor实际上只有原型对象有实际引用方向（指向原型对象的构造函数）
原型对象的constructor直接指向自己的构造函数

所有函数的终点都是Function函数
所有对象的终点都是Object原型对象

1、实例化对象的proto指向父级的原型对象
2、父级函数的prototype指向自己的原型对象
3、父级函数的原型的constructor指向父级函数
由1、3可得到一般对象的constructor也指向父级函数由proto找出）
父级函数的proto指向Function.prototype
父级函数的constructor指向Function函数（由proto找出）
父级函数的prototype指向自己的原型

Function函数的proto指向自己的原型（特殊，因为为最顶层）
Function函数的constructor指向自己（由proto找出）
Function函数的prototype指向原型

父级原型对象的proto指向Object.prototype
父级原型对象的constructor父级构造函数

Object原型对象的proto指向null（没有父级）
Object原型对象的constructor指向Object函数

Object函数的proto指向Function.prototype
Object函数的prototype指向Object.prototype
Object函数的constructor指向Function函数

Function原型对象的proto指向Object.prototype
Function原型对象的constructor指向Function函数

关于原型小记
this指向运行时所在的作用域

this指向调用这个函数的对象，对象为空指向window

创建构造函数是通过私有化变量，同时通过闭包方式可以访问变量

new创建实例会改变方法内this的指向，指向生成的实例对象

原型继承的本质是__proto__属性的指向连接，__proto__实际的指向是指向其构造函数的原型对象（也可以理解为父级对象函数的原型对象）

通过原型继承，子构造原型可以重写父类构造函数定义的方法，但是只针对这一条原型链有效，其他父级的实例化对象调用的函数还是之前的，原型继承后，需要手动改变constructor的指向
防止出现，子类的实例的constructor指向不明的情况（同时指向两个构造函数）

es6中通过setPrototypeOf（object,object.prototype）、getPrototype(object)、Object.create(object.prototype)方法设置对象的原型