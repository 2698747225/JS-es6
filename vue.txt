v-bind：相当于单向绑定，后面跟的属性相当于绑定的属性，值为vue实例的值（相当于angular2的方括号）

v-on：相当于绑定事件，后面跟的是事件名，以及vue实例中的事件名。事件名尽量使用短横线表示，驼峰法会被转为小写

父、子组件传值，父往子组件传值通过在父组件bind属性，子组件props属性接收属性名获得，相当于angular中的@Input

子向父组件传值，通过$emit传递一个模板参数，使父组件接收，相当于@output

vue的v-if、v-else中的模板并不会从头开始渲染，实际上会保留数据（意味着数据在dom隐藏后依然缓存了下来），如果要使用不复用数据的方法，需要使用key

因为wabpack对单文件组件的支持很好，所以大多数页面的组件都应使用单文件组件。全局的共享组件应该使用node中的require加载共享组件包，在根入口进行全局的注册

props是子组件用来引用父组件传递参数，可以使用数组来接收多个值，也可以使用对象，接收一个{title:string,name:string}类似的对象，可以限制接收参数的类型，类似ts
组件的props如果含有大写字符，那么在dom模板中应该用短横线表示

父子组件传值时，父组件的props改变，数据流会单向向下更新，子组件的props会自动更新。子组建若从父组件接收一个对象类型的prop，当在子组件中修改对象时，父组件中的
对象依然也会发生改变，但vue不推荐这种做法，会有报错。推荐是隔离对象之间的引用。

v-bind可以绑定特性，用来传递给子组件。同时可以传递一个键值队对象，用来传递多个特性。当不使用v-bind时，传入的prop会被解析为字符串，理论上讲，只有向模板中传入字符串
时，才会不用v-bind，其他类型比如数组、对象、整型、布尔等都需要v-bind以确定不是以字符串的方式传递。

$props：子组件中可以通过$props访问到自身组件的props对象，通过v-bind=$props，可以把自身props完整的传入模板中。
$listeners：子组件中可以通过$listeners访问到自身绑定的事件对象，可以通过v-on=$listeners绑定到模板中
$attrs：子组件中可以通过$attrs访问到自身的非props（除style、class外）的属性

父组件若要直接触发模板中的子组件的事件，需要在绑定事件时加入.native，但仅限与子模板的根模板是有这个事件的（通俗一点就是父组件内的子组件模板上直接绑定方法可执行）

父组件和子组件之间一般是单向数据流，如果要进行双向绑定，建议用sync语法糖，子组件中emit('update:param')通知父组件更新这个值

关于动态模板相关，要是用其他组件，首先要在全局或组件内注册！。通过v-bind:is可以把组件绑定在component组件上，若这个组件切换成其他组件，会进行重新渲染。<keep-alive>
会阻止组件的重新渲染。

组件可以通过$root访问到根实例，$parent可以访问到父组件，但由于组件之间嵌套关系多，不建议直接使用父组件方法，而是使用依赖注入的方法。父组件通过provider返回需要注入的内容，
所有的子组件都可以提通过inject选项注入。

父组件可以在子组件上定义ref注册引用信息，子组件会注册到$ref里，若非自组件而是普通DOM，则为dom本身（类似与angular的elementRef）

通过v-once可以创建出只编译渲染一次的模板。

通过mixins可以给组件注册混入内容，混入内容会优先组件内容执行，若混入内容和组件定义的内容重名，会以组件为准。同时混入也支持全局注册(Vue.mixin({}))，全局注册后所有组件都会混入。

vue指令和angular指令相同，用来操作dom元素。支持组件内局部定义，或者绑定在vue上全局定义。组件中钩子函数的参数为el,binding等，el为dom，binding为指令所带有的参数信息
指令钩子函数：
	bind：指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。
	inserted：被绑定元素插入父节点时调用
	update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前
	componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用
	unbind：解绑时

若父组件中子组件的模板中任然包含内容，可以通过<slot></slot>实现，类似angular的<ng-content></ng-content>，slot称为插槽。可以通过在模板上标注v-slot指令来申明插槽的名字
(v-slot:name)，以及插槽本体（v-slot:name="slotBody"）。子组件中通过在插槽组件上添加name元素标记属于哪个插槽。若要在父组件的子组件插槽内容中使用子组件作用域的参数，需要
在子组件中插槽组件中v-bind一个特性（插槽prop）暴露自己作用域中的值，父组件中可以在slotBody中拿到这个特性（具名插槽在父组件中一定要绑在template上）

vue动态渲染部分，render会在beforeCreated之前执行，回调函数中返回createElement方法构造模板，参数为（'h1',Object||VNode），第一个参数为标签，第二个参数为写入标签模板的
数据对象，同时也可以传递一个数组写入多个Vnode节点（子节点），一个组件下不允许创建多个Vnode。

watch部分，可以监听实例属性变化，但如果实例属性为对象，需要深度监听，如果需要监听第一次初始化，需要加上immediate
watch和computed在使用场景上的区别主要在于，computed创建的属性依赖多个属性变化（当多个属性变化都会触发这个监听的值）。
而watch一般情况下是处理监听一个值的变化、来做处理，同时一般watch用来处理异步业务逻辑以及复杂业务逻辑。computed监听的效率要高很多，通过在实例上绑定watch函数会自动
 注销，但是命令式需要手动注销防止内存泄露。

computed计算属性，相当于getter、setter方法。特殊的地方在于进方法的方式采用了缓存，这表示若getter中的内容不是响应式的（new Date()），则不会再进函数计算第二次，
响应式的数据发生变化才会导致再次进入函数计算。（即使是v-if重新渲染也不会进入计算方法）

v-model针对不同控件会利用不同的特性名，例如文本框则v-model为v-bind:value和v-on:input，而针对复选框则为v-bind:checked和v-on:change

vue的修饰符有v-model修饰符（.lazy，.trim，.number），事件修饰符（.stop，.prevent，.once，.self，.capture），按键修饰符(.enter，.delete，.up，.down，.left，.right)，
系统修饰符（...）和.sync

组件注册可以异步注册，使用的场景一般是通过异步手动获取模块进行注册，总体分为两种方式注册
1、通过工厂函数返回
Vue.component('async-component',function(resolve,reject){
	// 异步方法
	resolve(component);
})
2、通过es6动态import引入的方式(import())
Vue.component('async-component',()=>import('./test'));

全局注册的vue组件可以循环引用（模板中引用自己），方式是通过name属性设置，但一定要注意maxstack
